{
	"info": {
		"_postman_id": "033627ae-80bb-4a1c-a0c1-ba79ac34c7ae",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30949409"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    const productSchema = JSON.parse(pm.environment.get('product_schema'))\r",
									"    pm.response.to.have.jsonSchema(productSchema);\r",
									"})\r",
									"\r",
									"// push new product to \"products_list\" \r",
									"const newProduct = JSON.parse(pm.response.text())\r",
									"let productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"productsList.push(newProduct)\r",
									"pm.environment.set(\"products_list\", JSON.stringify(productsList));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": {{product_name}},\r\n    \"price\": {{product_price}},\r\n    \"sku\": {{product_sku}},\r\n    \"description\": {{product_description}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    const productsSchema = JSON.parse(pm.environment.get('products_schema'));\r",
									"    pm.response.to.have.jsonSchema(productsSchema);\r",
									"})\r",
									"\r",
									"pm.test('Response is an array with at least one element', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    pm.environment.set(\"products_list\", JSON.stringify(responseData));\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    const productSchema = JSON.parse(pm.environment.get(\"product_schema\"))\r",
									"    pm.response.to.have.jsonSchema(productSchema);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"const lastAddedProduct = productsList[productsList.length - 1]\r",
									"\r",
									"pm.environment.set(\"product_id\", lastAddedProduct.id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Negative] Get product by ID - id:invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"product_id\", \"string\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Negative] Create product - uncompleted body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Schema is invalid', function () {\r",
									"    const productSchema = JSON.parse(pm.environment.get('product_schema'))\r",
									"    pm.request.to.not.have.jsonSchema(productSchema);\r",
									"})\r",
									"\r",
									"// push new product to \"products_list\"\r",
									"let productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"const lastAddedProduct = productsList[productsList.length - 1]\r",
									"\r",
									"let newProduct = JSON.parse(pm.request.body.raw)\r",
									"newProduct = {\r",
									"    id: lastAddedProduct.id + 1,\r",
									"    ...newProduct\r",
									"}\r",
									"\r",
									"productsList.push(newProduct)\r",
									"pm.environment.set(\"products_list\", JSON.stringify(productsList));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": {{product_price}},\r\n    \"sku\": {{product_sku}},\r\n    \"description\": {{product_description}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Negative] Create product - price:string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test('Schema is invalid', function () {\r",
									"    const productSchema = JSON.parse(pm.environment.get('product_schema'))\r",
									"\r",
									"    // const requestBody = JSON.parse(pm.request.body.raw)\r",
									"    // const productSchemaLength = Object.keys(productSchema.properties).length\r",
									"    // const requestBodyLength = Object.keys(requestBody).length\r",
									"    // pm.expect(productSchemaLength).to.be.greaterThan(requestBodyLength);\r",
									"    // console.log(pm.request.body.raw)\r",
									"    console.log(pm.response)\r",
									"\r",
									"    // pm.request.to.not.have.jsonSchema(productSchema);\r",
									"    // pm.request.body.raw.to.have.jsonSchema(requestroductSchema);\r",
									"    pm.response.to.not.have.jsonSchema(productSchema);\r",
									"})\r",
									"\r",
									"// push new product to \"products_list\" \r",
									"const newProduct = JSON.parse(pm.response.text())\r",
									"let productsListUpdated = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"productsListUpdated.push(newProduct)\r",
									"pm.environment.set(\"products_list\", JSON.stringify(productsListUpdated));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": {{product_name}},\r\n    \"price\": \"{{product_price}}\",\r\n    \"sku\": {{product_sku}},\r\n    \"description\": {{product_description}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products - pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response is an array with at least one element', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Response data array length is equal to page size\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  const pageSize = pm.variables.get(\"page_size\");\r",
									"   \r",
									"  pm.expect(responseData.length).to.equal(Number(pageSize));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\", 1);\r",
									"pm.environment.set(\"page_size\", 3);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?page={{page}}&pageSize={{page_size}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "pageSize",
									"value": "{{page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Negative] List products - pagination - page:invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"The `page` parameter is invalid\", function () {\r",
									"    const page = pm.environment.get(\"page\");\r",
									"    pm.expect(page).to.be.lessThan(1)\r",
									"})\r",
									"\r",
									"pm.test(\"The response body is empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.empty\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\", 0);\r",
									"pm.environment.set(\"page_size\", 3);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?page={{page}}&pageSize={{page_size}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "pageSize",
									"value": "{{page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Negative] List products - pagination - pageSize:invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"The `pageSize` parameter is invalid\", function () {\r",
									"    const pageSize = pm.environment.get(\"page_size\");\r",
									"    pm.expect(pageSize).to.be.lessThan(1)\r",
									"})\r",
									"\r",
									"pm.test(\"The response body is empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.empty\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"page\", 1);\r",
									"pm.environment.set(\"page_size\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?page={{page}}&pageSize={{page_size}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "pageSize",
									"value": "{{page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List products - sorting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    const productsSchema = JSON.parse(pm.environment.get(\"products_schema\"))\r",
									"    pm.response.to.have.jsonSchema(productsSchema);\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an array with at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response array is sorted according to sortOrder and sortKey\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const sortOrder = pm.variables.get(\"sort_order\");\r",
									"    const sortKey = pm.variables.get(\"sort_key\");\r",
									"    const productsList = JSON.parse(pm.variables.get(\"products_list\"));\r",
									"\r",
									"    const productsListSorted = [...productsList].sort((a, b) => {\r",
									"        const valueA = a[sortKey]\r",
									"        const valueB = b[sortKey]\r",
									"\r",
									"        if (sortOrder === 'ASC') {\r",
									"            return valueA < valueB ? -1 : valueA > valueB ? 1 : 0\r",
									"        } else if (sortOrder === 'DESC') {\r",
									"            return valueA < valueB ? 1 : valueA > valueB ? -1 : 0\r",
									"        }\r",
									"    });\r",
									"\r",
									"    console.log(productsListSorted)\r",
									"\r",
									"    // pm.expect(JSON.stringify(responseData)).to.be.equal(JSON.stringify(productsListSorted))\r",
									"    pm.expect(responseData).to.deep.equal(productsListSorted)\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"sort_order\", \"ASC\");\r",
									"pm.environment.set(\"sort_key\", \"id\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder={{sort_order}}&sortKey={{sort_key}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "{{sort_order}}"
								},
								{
									"key": "sortKey",
									"value": "{{sort_key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Negative] List products - sortOrder:invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Query parameter `sort_order` is invalid\", function () {\r",
									"    const queryParams = pm.request.url.query.all()\r",
									"    const param = queryParams.find((item) => item.key === \"sortOrder\")\r",
									"    const paramValue = param ? param.value : null\r",
									"    pm.expect(['ASC', 'DESC']).to.not.include(paramValue);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"sort_order\", 'invalid-sortOrder');\r",
									"pm.environment.set(\"sort_key\", 'name');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder={{sort_order}}&sortKey={{sort_key}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "{{sort_order}}"
								},
								{
									"key": "sortKey",
									"value": "{{sort_key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Negative] List products - sortKey:invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"sort_key\",\"invalid-key\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder={{sort_order}}&sortKey={{sort_key}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "{{sort_order}}"
								},
								{
									"key": "sortKey",
									"value": "{{sort_key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"const lastAddedProduct = productsList[productsList.length - 1]\r",
									"pm.environment.set(\"product_id\", lastAddedProduct.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{product_id}},\r\n    \"name\": {{product_name_updated}},\r\n    \"price\": {{product_price_updated}},\r\n    \"sku\": {{product_sku_updated}},\r\n    \"description\": {{product_description_updated}}\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						},
						"description": "\nThis API endpoint allows you to update the details of a product. It uses the HTTP PUT method to send a request to the specified URL.\n\nTo update a product, send a PUT request to `{{baseUrl}}/products`. The request should include the updated details of the product in the request body.\n\nThe last execution of this request returned a response with a status code of 200. The response body contained the updated details of the product, including the `id`, `name`, `price`, `sku`, and `description` fields.\n\nPlease note that the specific values of the fields may vary depending on the product being updated.\n\nMake sure to include all the necessary fields in the request body to ensure a successful update.\n\nExample request:\n```\nPUT {{baseUrl}}/products\nContent-Type: application/json\n\n{\n  \"id\": 123,\n  \"name\": \"Updated Product\",\n  \"price\": 19.99,\n  \"sku\": 456,\n  \"description\": \"This is the updated description of the product\"\n}\n```\n\nExample response:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"id\": 123,\n  \"name\": \"Updated Product\",\n  \"price\": 19.99,\n  \"sku\": 456,\n  \"description\": \"This is the updated description of the product\"\n}\n```\n\nRemember to replace the placeholders (`{{baseUrl}}`) with the actual base URL of the API.\n\n"
					},
					"response": []
				},
				{
					"name": "[Negative] Update product - id:invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Schema is invalid', function () {\r",
									"    const productSchema = JSON.parse(pm.environment.get('product_schema'))\r",
									"    pm.request.to.not.have.jsonSchema(productSchema);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"product_id\", 'invalid-id');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{product_id}},\r\n    \"name\": {{product_name_updated}},\r\n    \"price\": {{product_price_updated}},\r\n    \"sku\": {{product_sku_updated}},\r\n    \"description\": {{product_description_updated}}\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						},
						"description": "\nThis API endpoint allows you to update the details of a product. It uses the HTTP PUT method to send a request to the specified URL.\n\nTo update a product, send a PUT request to `{{baseUrl}}/products`. The request should include the updated details of the product in the request body.\n\nThe last execution of this request returned a response with a status code of 200. The response body contained the updated details of the product, including the `id`, `name`, `price`, `sku`, and `description` fields.\n\nPlease note that the specific values of the fields may vary depending on the product being updated.\n\nMake sure to include all the necessary fields in the request body to ensure a successful update.\n\nExample request:\n```\nPUT {{baseUrl}}/products\nContent-Type: application/json\n\n{\n  \"id\": 123,\n  \"name\": \"Updated Product\",\n  \"price\": 19.99,\n  \"sku\": 456,\n  \"description\": \"This is the updated description of the product\"\n}\n```\n\nExample response:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"id\": 123,\n  \"name\": \"Updated Product\",\n  \"price\": 19.99,\n  \"sku\": 456,\n  \"description\": \"This is the updated description of the product\"\n}\n```\n\nRemember to replace the placeholders (`{{baseUrl}}`) with the actual base URL of the API.\n\n"
					},
					"response": []
				},
				{
					"name": "[Negative] Update product - uncompleted body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test('Schema is invalid', function () {\r",
									"    const productSchema = JSON.parse(pm.environment.get('product_schema'))\r",
									"    pm.request.to.not.have.jsonSchema(productSchema);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"const lastAddedProduct = productsList[productsList.length - 1]\r",
									"console.log(lastAddedProduct.id)\r",
									"pm.environment.set(\"product_id\", lastAddedProduct.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{product_id}},\r\n    \"price\": {{product_price_updated}},\r\n    \"sku\": {{product_sku_updated}},\r\n    \"description\": {{product_description_updated}}\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						},
						"description": "\nThis API endpoint allows you to update the details of a product. It uses the HTTP PUT method to send a request to the specified URL.\n\nTo update a product, send a PUT request to `{{baseUrl}}/products`. The request should include the updated details of the product in the request body.\n\nThe last execution of this request returned a response with a status code of 200. The response body contained the updated details of the product, including the `id`, `name`, `price`, `sku`, and `description` fields.\n\nPlease note that the specific values of the fields may vary depending on the product being updated.\n\nMake sure to include all the necessary fields in the request body to ensure a successful update.\n\nExample request:\n```\nPUT {{baseUrl}}/products\nContent-Type: application/json\n\n{\n  \"id\": 123,\n  \"name\": \"Updated Product\",\n  \"price\": 19.99,\n  \"sku\": 456,\n  \"description\": \"This is the updated description of the product\"\n}\n```\n\nExample response:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"id\": 123,\n  \"name\": \"Updated Product\",\n  \"price\": 19.99,\n  \"sku\": 456,\n  \"description\": \"This is the updated description of the product\"\n}\n```\n\nRemember to replace the placeholders (`{{baseUrl}}`) with the actual base URL of the API.\n\n"
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"// remove deleted product from \"products_list\" \r",
									"let productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"let lastAddedProductId = pm.environment.get(\"product_id\");\r",
									"const productsListUpdated = productsList.filter(product => product.id !== lastAddedProductId)\r",
									"pm.environment.set(\"products_list\", JSON.stringify(productsListUpdated));\r",
									"productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"pm.environment.set(\"product_id\", productsList[productsList.length - 1].id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"const lastAddedProduct = productsList[productsList.length - 1]\r",
									"pm.environment.set(\"product_id\", lastAddedProduct.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"// remove deleted product from \"products_list\" \r",
									"let productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"let lastAddedProductId = pm.environment.get(\"product_id\");\r",
									"const productsListUpdated = productsList.filter(product => product.id !== lastAddedProductId)\r",
									"pm.environment.set(\"products_list\", JSON.stringify(productsListUpdated));\r",
									"productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"pm.environment.set(\"product_id\", productsList[productsList.length - 1].id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"const lastAddedProduct = productsList[productsList.length - 1]\r",
									"pm.environment.set(\"product_id\", lastAddedProduct.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"// remove deleted product from \"products_list\" \r",
									"let productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"let lastAddedProductId = pm.environment.get(\"product_id\");\r",
									"const productsListUpdated = productsList.filter(product => product.id !== lastAddedProductId)\r",
									"pm.environment.set(\"products_list\", JSON.stringify(productsListUpdated));\r",
									"productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"pm.environment.set(\"product_id\", productsList[productsList.length - 1].id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"const lastAddedProduct = productsList[productsList.length - 1]\r",
									"pm.environment.set(\"product_id\", lastAddedProduct.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Negative] Get product by ID - id:non-existing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"const lastAddedProduct = productsList[productsList.length - 1]\r",
									"console.log(lastAddedProduct.id + 1)\r",
									"pm.environment.set(\"product_id\", lastAddedProduct.id + 1);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Negative] Remove product by ID - id:invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									"\r",
									"// remove deleted product from \"products_list\" \r",
									"let productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"let lastAddedProductId = pm.environment.get(\"product_id\");\r",
									"const productsListUpdated = productsList.filter(product => product.id !== lastAddedProductId)\r",
									"pm.environment.set(\"products_list\", JSON.stringify(productsListUpdated));\r",
									"productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"pm.environment.set(\"product_id\", productsList[productsList.length - 1]);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const productsList = JSON.parse(pm.environment.get(\"products_list\"))\r",
									"const lastAddedProduct = productsList[productsList.length - 1]\r",
									"pm.environment.set(\"product_id\", lastAddedProduct.id + 1);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Negative] Remove product by ID - id:string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"})\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									"\r",
									"// cleanup\r",
									"pm.environment.set(\"sort_order\", '');\r",
									"pm.environment.set(\"sort_key\", '');\r",
									"pm.environment.set(\"page\", '');\r",
									"pm.environment.set(\"page_size\", '');\r",
									"pm.environment.set(\"product_id\", '');\r",
									"pm.environment.set(\"products_list\", '[]');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"product_id\", \"test-string-id\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "List orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}